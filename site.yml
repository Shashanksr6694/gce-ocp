---
- name: Compute Engine Instance Examples
  hosts: localhost
  tasks:
    #section for setting up network
    - name: create the ocp network
      gce_net:
        project_id: "{{ project_id }}"
        credentials_file: "{{ credentials_file }}"
        service_account_email: "{{ service_account_email }}"
        name: "{{ cluster_network_name }}"
        mode: custom
        subnet_name: "{{ cluster_subnetwork_name }}"
        subnet_region: "{{ region }}"
        ipv4_range: "{{ cluster_network_cidr }}"
        state: "present"
    - name: Allow http(s) traffic to the infra nodes
      gce_net:
        project_id: "{{ project_id }}"
        credentials_file: "{{ credentials_file }}"
        name: "{{ cluster_network_name }}"
        fwname: ext-to-infra
        allowed: tcp:80,443
        target_tags: "{{ infra_tag }}"
        state: present
    - name: Allow https traffic to the master nodes
      gce_net:
        project_id: "{{ project_id }}"
        credentials_file: "{{ credentials_file }}"
        name: "{{ cluster_network_name }}"
        fwname: ext-to-master
        allowed: tcp:443
        target_tags: "{{ master_tag }}"
        state: present
    - name: Allow ssh traffic to bastion
      gce_net:
        project_id: "{{ project_id }}"
        credentials_file: "{{ credentials_file }}"
        name: "{{ cluster_network_name }}"
        fwname: ext-to-bastion-ssh-22
        allowed: tcp:22
        target_tags: "{{ bastion_tag }}" 
        state: present
    - name: Allow ssh traffic from bastion to hosts
      gce_net:
        project_id: "{{ project_id }}"
        credentials_file: "{{ credentials_file }}"
        name: "{{ cluster_network_name }}"
        fwname: bastion-to-nodes-ssh-22
        allowed: tcp:22
        target_tags: "{{ node_tag }}"
        src_tags: "{{ bastion_tag }}"
        state: present
    - name: Allow udp/tcp traffic on port 8053 from nodes to master
      gce_net:
        project_id: "{{ project_id }}"
        credentials_file: "{{ credentials_file }}"
        name: "{{ cluster_network_name }}"
        fwname: node-to-master-traffic
        allowed: udp:8053;tcp:8053
        target_tags: "{{ master_tag }}"
        src_tags: "{{ node_tag }}"
        state: present
    - name: Allow tcp traffic on port 10250 from master to nodes
      gce_net:
        project_id: "{{ project_id }}"
        credentials_file: "{{ credentials_file }}"
        name: "{{ cluster_network_name }}"
        fwname: master-to-node-traffic
        allowed: tcp:10250
        target_tags: "{{ node_tag }}"
        src_tags: "{{ master_tag }}"
        state: present
    - name: Allow tcp traffic on ports 2379 and 2380 from master to master
      gce_net:
        project_id: "{{ project_id }}"
        credentials_file: "{{ credentials_file }}"
        name: "{{ cluster_network_name }}"
        fwname: master-to-master-traffic
        allowed: tcp:2379,2380
        target_tags: "{{ master_tag }}"
        src_tags: "{{ master_tag }}"
        state: present
    - name: Allow tcp traffic on port 443 from any to master
      gce_net:
        project_id: "{{ project_id }}"
        credentials_file: "{{ credentials_file }}"
        name: "{{ cluster_network_name }}"
        fwname: any-to-master-traffic
        allowed: tcp:443
        target_tags: "{{ master_tag }}"
        src_range: "{{ cluster_network_cidr }}"
        state: present
    - name: Allow tcp traffic on ports 9200 and 9300 from infra to infra
      gce_net:
        project_id: "{{ project_id }}"
        credentials_file: "{{ credentials_file }}"
        name: "{{ cluster_network_name }}"
        fwname: infra-to-infra-traffic
        allowed: tcp:9200,9300
        target_tags: "{{ infra_tag }}"
        src_tags: "{{ infra_tag }}"
        state: present
    - name: Allow tcp traffic on port 443 and 80 from any to infra
      gce_net:
        project_id: "{{ project_id }}"
        credentials_file: "{{ credentials_file }}"
        name: "{{ cluster_network_name }}"
        fwname: any-to-infra-traffic
        allowed: tcp:80,443
        target_tags: "{{ infra_tag }}"
        src_range: 0.0.0.0/0
        state: present
    - name: Allow udp traffic on port 4789 from node to node
      gce_net:
        project_id: "{{ project_id }}"
        credentials_file: "{{ credentials_file }}"
        name: "{{ cluster_network_name }}"
        fwname: node-to-node-traffic
        allowed: udp:4789
        target_tags: "{{ node_tag }}"
        src_tags: "{{ node_tag }}"
        state: present
    - name: Allow tcp traffic on port 10250 from infra to node
      gce_net:
        project_id: "{{ project_id }}"
        credentials_file: "{{ credentials_file }}"
        name: "{{ cluster_network_name }}"
        fwname: infra-to-node-traffic
        allowed: udp:10250
        target_tags: "{{ node_tag }}"
        src_tags: "{{ infra_tag }}"
        state: present
    - name: Allow tcp traffic on port 2222 from cns to cns
      gce_net:
        project_id: "{{ project_id }}"
        credentials_file: "{{ credentials_file }}"
        name: "{{ cluster_network_name }}"
        fwname: cns-to-cns
        allowed: tcp:2222
        target_tags: "{{ cns_tag }}"
        src_tags: "{{ cns_tag }}"
        state: present
    - name: Allow tcp traffic from node to cns
      gce_net:
        project_id: "{{ project_id }}"
        credentials_file: "{{ credentials_file }}"
        name: "{{ cluster_network_name }}"
        fwname: node-to-cns
        allowed: tcp:111,3260,24007-24010,49152-49664;udp:111
        target_tags: "{{ cns_tag }}"
        src_tags: "{{ node_tag }}"
        state: present

    - name: Create bastion host
      gce:
        instance_names: bastion-host
        zone: "{{ zone }}"
        machine_type: n1-standard-1
        image: "{{ machine_image }}"
        state: present
        tags:
          - "{{ bastion_tag }}"
        credentials_file: "{{ credentials_file }}"
        project_id: "{{ project_id }}"
        network: "{{ cluster_network_name }}"
        subnetwork: "{{ cluster_subnetwork_name }}"
      register: gce_bastion

    - name: create boot disks
      gcp_compute_disk:
        name: "{{ item }}-boot-disk"
        size_gb: 10
        zone: "{{ zone }}"
        project: "{{ project_id }}"
        source_image: "https://www.googleapis.com/compute/v1/projects/{{ project_id }}/global/images/{{ machine_image }}"
        auth_kind: serviceaccount
        service_account_file: "{{ credentials_file }}"
        scopes:
          - https://www.googleapis.com/auth/compute
        state: present
      with_items:
        - "{{ masters }}"
        - "{{ infra_nodes }}"
        - "{{ app_nodes }}"
        - "{{ cns_nodes }}"

    - name: create docker disks
      gcp_compute_disk:
        name: "{{ item }}-docker-disk"
        size_gb: 50
        zone: "{{ zone }}"
        project: "{{ project_id }}"
        auth_kind: serviceaccount
        service_account_file: "{{ credentials_file }}"
        scopes:
          - https://www.googleapis.com/auth/compute
        state: present
      with_items:
        - "{{ masters }}"
        - "{{ infra_nodes }}"
        - "{{ app_nodes }}"
        - "{{ cns_nodes }}"

    - name: create cns disks
      gcp_compute_disk:
        name: "{{ item }}-cns-disk"
        size_gb: 100
        zone: "{{ zone }}"
        project: "{{ project_id }}"
        auth_kind: serviceaccount
        service_account_file: "{{ credentials_file }}"
        scopes:
          - https://www.googleapis.com/auth/compute
        state: present
      with_items:
        - "{{ cns_nodes }}"

    - name: create master instances
      gce:
        instance_names: "{{item}}"
        zone: "{{ zone }}"
        machine_type: n1-standard-8
        image: "{{ machine_image }}"
        state: present
        tags:
          - "{{ master_tag }}"
          - "{{ node_tag }}"
        disks:
          - name: "{{ item }}-boot-disk"
            mode: READ_WRITE
          - name: "{{ item }}-docker-disk"
            mode: READ_WRITE
        credentials_file: "{{ credentials_file }}"
        project_id: "{{ project_id }}"
        network: "{{ cluster_network_name }}"
        subnetwork: "{{ cluster_subnetwork_name }}"
        service_account_permissions:
          - https://www.googleapis.com/auth/cloud-platform
          - https://www.googleapis.com/auth/cloud.useraccounts.readonly
          - https://www.googleapis.com/auth/compute
          - https://www.googleapis.com/auth/devstorage.read_write
          - https://www.googleapis.com/auth/logging.write
          - https://www.googleapis.com/auth/monitoring.write
          - https://www.googleapis.com/auth/service.management.readonly
          - https://www.googleapis.com/auth/servicecontrol
      with_items: "{{ masters }}"
      register: gce_master

    - name: create infra instances
      gce:
        instance_names: "{{item}}"
        zone: "{{ zone }}"
        machine_type: n1-standard-8
        image: "{{ machine_image }}"
        state: present
        tags:
          - "{{ infra_tag }}"
          - "{{ node_tag }}"
        disks:
          - name: "{{ item }}-boot-disk"
            mode: READ_WRITE
          - name: "{{ item }}-docker-disk"
            mode: READ_WRITE
        credentials_file: "{{ credentials_file }}"
        project_id: "{{ project_id }}"
        network: "{{ cluster_network_name }}"
        subnetwork: "{{ cluster_subnetwork_name }}"
        service_account_permissions:
          - https://www.googleapis.com/auth/cloud.useraccounts.readonly
          - https://www.googleapis.com/auth/compute
          - https://www.googleapis.com/auth/devstorage.read_write
          - https://www.googleapis.com/auth/logging.write
          - https://www.googleapis.com/auth/monitoring.write
          - https://www.googleapis.com/auth/service.management.readonly
          - https://www.googleapis.com/auth/servicecontrol
      with_items: "{{ infra_nodes }}"
      register: gce_infra

    - name: create app node instances
      gce:
        instance_names: "{{item}}"
        zone: "{{ zone }}"
        machine_type: n1-standard-8
        image: "{{ machine_image }}"
        state: present
        tags:
          - "{{ node_tag }}"
        disks:
          - name: "{{ item }}-boot-disk"
            mode: READ_WRITE
          - name: "{{ item }}-docker-disk"
            mode: READ_WRITE
        credentials_file: "{{ credentials_file }}"
        project_id: "{{ project_id }}"
        network: "{{ cluster_network_name }}"
        subnetwork: "{{ cluster_subnetwork_name }}"
        service_account_permissions:
          - https://www.googleapis.com/auth/cloud.useraccounts.readonly
          - https://www.googleapis.com/auth/compute
          - https://www.googleapis.com/auth/devstorage.read_only
          - https://www.googleapis.com/auth/logging.write
          - https://www.googleapis.com/auth/monitoring.write
          - https://www.googleapis.com/auth/service.management.readonly
          - https://www.googleapis.com/auth/servicecontrol
      with_items: "{{ app_nodes }}"
      register: gce_app_node

    - name: create cns instances
      gce:
        instance_names: "{{item}}"
        zone: "{{ zone }}"
        machine_type: n1-standard-4
        image: "{{ machine_image }}"
        state: present
        tags:
          - "{{ cns_tag }}"
          - "{{ node_tag }}"
        disks:
          - name: "{{ item }}-boot-disk"
            mode: READ_WRITE
          - name: "{{ item }}-docker-disk"
            mode: READ_WRITE
          - name: "{{ item }}-cns-disk"
            mode: READ_WRITE
        credentials_file: "{{ credentials_file }}"
        project_id: "{{ project_id }}"
        network: "{{ cluster_network_name }}"
        subnetwork: "{{ cluster_subnetwork_name }}"
        service_account_permissions:
          - https://www.googleapis.com/auth/cloud.useraccounts.readonly
          - https://www.googleapis.com/auth/compute
          - https://www.googleapis.com/auth/devstorage.read_write
          - https://www.googleapis.com/auth/logging.write
          - https://www.googleapis.com/auth/monitoring.write
          - https://www.googleapis.com/auth/service.management.readonly
          - https://www.googleapis.com/auth/servicecontrol
      with_items: "{{ cns_nodes }}"
      register: gce_cns_node

    - name: Create IP for app LB
      gce_eip:
        credentials_file: "{{ credentials_file }}"
        project_id: "{{ project_id }}"
        service_account_email: "{{ service_account_email }}"
        name: "{{ project_id }}-app-lb-ip"
        region: "{{ region }}"
        state: present
    - name: create list with infra nodes + zone
      set_fact:
        app_nodes_with_zone: "{{ infra_nodes | map('regex_replace', '^(.*)$','{{ zone }}/\\1') | list  }}"
    - name: Create app LB
      gce_lb:
        credentials_file: "{{ credentials_file }}"
        project_id: "{{ project_id }}"
        service_account_email: "{{ service_account_email }}"
        name: "{{ project_id }}-app-lb"
        region: "{{ region }}"
        members: "{{ app_nodes_with_zone }}"
        external_ip: "{{ project_id }}-app-lb-ip"
        port_range: 80-443
#        httphealthcheck_name: "{{ project_id }}-master-lb-healthcheck"
#        httphealthcheck_port: 443
#        httphealthcheck_path: "/healthz"
#        httphealthcheck_interval: 10
#        httphealthcheck_timeout: 10
#        httphealthcheck_healthy_count: 3
#        httphealthcheck_unhealthy_count: 3
        state: present
#Create master LB
    - name: create an ip-address for the master LB
      gcp_compute_address:
          name: "{{ project_id }}-master-lb-ip"
          region: "{{ region }}"
          project: "{{ project_id }}"
          auth_kind: serviceaccount
          service_account_file: "{{ credentials_file }}"
          scopes:
            - https://www.googleapis.com/auth/compute
          state: present
      register: lb_ip_address
    - name: create a target pool
      gcp_compute_target_pool:
          name: "{{ project_id }}-master-tp"
          region: "{{ region }}"
          project: "{{ project_id }}"
          auth_kind: serviceaccount
          service_account_file: "{{ credentials_file }}"
          session_affinity: CLIENT_IP
          scopes:
            - https://www.googleapis.com/auth/compute
          state: present
      register: targetpool
    - name: Add instances to target pool
      shell: "gcloud compute target-pools add-instances gce-ocp-test-master-tp --instances={{ item }} --instances-zone={{ zone }}"
      with_items: "{{ masters }}"
    - name: create a forwarding rule
      gcp_compute_forwarding_rule:
          name: "{{ project_id }}-master-fr"
          region: "{{ region }}"
          target: "{{ targetpool }}"
          ip_protocol: 'TCP'
          port_range: '443-443'
          ip_address: "{{ lb_ip_address.address }}"
          project: "{{ project_id }}"
          auth_kind: serviceaccount
          service_account_file: "{{ credentials_file }}"
          scopes:
            - https://www.googleapis.com/auth/compute
          state: present

    - name: Save host data (master)
      add_host:
        hostname: "{{ item.instance_data[0].public_ip }}"
        groupname: master_ips
      loop: "{{ gce_master.results }}"

    - name: Save host data (infra)
      add_host:
        hostname: "{{ item.instance_data[0].public_ip }}"
        groupname: infra_ips
      loop: "{{ gce_infra.results }}"

    - name: Save host data (app node)
      add_host:
        hostname: "{{ item.instance_data[0].public_ip }}"
        groupname: app_node_ips
      loop: "{{ gce_app_node.results }}"

    - name: Save host data (cns node)
      add_host:
        hostname: "{{ item.instance_data[0].public_ip }}"
        groupname: cns_ips
      loop: "{{ gce_cns_node.results }}"

    - name: Save host data (bastion)
      add_host:
        hostname: "{{ item.public_ip }}"
        groupname: bastion_ips
      with_items: "{{ gce_bastion.instance_data }}"

- hosts: bastion_ips
  become: no
  tasks:
    - name: Copy id_rsa file to bastion for access
      copy:
        src: "{{ private_key_location }}"
        dest: ~/.ssh/id_rsa
        owner: "{{ remote_linux_user }}"
        group: "{{ remote_linux_user }}"
        mode: 0600
    - name: Add host name key to known hosts
      shell: ssh-keyscan -H {{' '.join(masters) + ' ' + ' '.join(infra_nodes) + ' ' + ' '.join(app_nodes) + ' ' + ' '.join(cns_nodes) }} >> .ssh/known_hosts
        creates=.ssh/known_hosts
        chdir="/home/{{remote_linux_user}}"

- hosts: bastion_ips
  become: yes
  become_method: sudo
  roles:
    - bastion-prereq
